#autoload

function create_for_each_ref_format() {
  type=$1
  echo "--format='%(color:green)[${type}]%09%(color:reset)%(color:magenta)%(refname:short)%(color:reset) %(color:yellow)%(authordate:short) %(color:reset) %(color:blue)[%(authorname)]%(color:reset)%09'"
}

function create_git_log_format() {
  type=$1
  echo "--format='%C(green)[${type}]  %Creset%C(magenta)%h%Creset %C(yellow)%cr %x09%Creset [%C(blue)%an%Creset] %x09%C(auto)%s %d'"
}

typeset -g git_diff_preview_command='[[ {-1} == "" ]] && return || [[ $(git diff -- {-1}) ]] && git diff --color=always -- {-1} || [[ $(git diff --cached -- {-1} ) ]] && git diff --cached --color=always -- {-1} || bat --color=always --style=grid --theme=ansi-dark {-1} 2>/dev/null || exa --color=always --tree {-1} 2>/dev/null'

typeset -g create_candidate_git_branch_command="git for-each-ref refs/heads refs/remotes --color=always $(create_for_each_ref_format branch) 2> /dev/null | column -t"
typeset -g create_candidate_git_tag_command="git for-each-ref refs/tags --color=always $(create_for_each_ref_format tag) 2> /dev/null | column -t"

local reflog_format="--format='%C(green)[reflog]  %Creset%C(magenta)%h%Creset %C(yellow)%cr %x09%Creset [%C(blue)%an%Creset] %x09%C(auto)%s %d'"
typeset -g create_candidate_git_reflog_command="git reflog --decorate --color=always ${reflog_format} 2> /dev/null"

local git_log_base="git log --decorate --color=always $(create_git_log_format commit)"
typeset -g create_candidate_git_log_command="${git_log_base} 2> /dev/null"
typeset -g create_candidate_all_git_log_command="{$git_log_base} --all 2> /dev/null"
typeset -g create_candidate_git_ls_files_command="git ls-files | xargs -I{} echo '[file]  {}' 2> /dev/null"

typeset -g -A symbols=()

symbols+=(
  '(^git add( -p| --patch)* $)'                             git_add
  '(^git commit (--fixup|--squash)( |=)$)'                  git_commit
  '(^git branch( --(merged|remotes))? (-(m|M|d|D))? $)'     git_branch_commit_tag
  '(^git log( ((-|--)\S*)*)?(?!( --)) $)'                   git_log
  '(^git log( ((-|--)\S*)*)? -- $)'                         git_log_file
  '(^git diff( --color-words)? -- $)'                       git_diff_file
  '(^git diff( --color-words)? (\S+ )?-- $)'                git_ls_files
  '(^git diff( --color-words)?(?!( --)) $)'                 git_diff_branch_commit_tag
  '(^git diff --cached( --color-words)? $)'                 git_diff_cached_branch
  '(^git diff --cached( --color-words)? -- $)'              git_diff_file
  '(^git reset( --soft| --hard)?(?!( --)) $)'               git_branch_commit_tag
  '(^git reset -- $)'                                       git_restore
  '(^git checkout $)'                                       git_branch_commit_tag
  '(^git checkout -- $)'                                    git_add
  '(^git checkout( \S*) -- $)'                              git_ls_files
  '(^git checkout(( -t)|( --track))? $)'                    git_branch_commit_tag
  '(^git restore $)'                                        git_restore
  '(^git restore (-s|--source) \S+ $)'                      git_ls_files
  '(^git restore $)'                                        git_restore
  '(^git switch $)'                                         git_branch_commit_tag
  '(^git rebase( (-i)|(--interactive))?( --autosquash)? $)' git_branch_commit_tag
  '(^git merge $)'                                          git_branch_commit_tag
  '(^git revert $)'                                         git_branch_commit_tag
  '(^git stash (list|show|pop|apply|drop) $)'               git_stash
  '(^git cherry-pick $)'                                    git_cherry_pick
)
